require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AuctionsController, type: :controller do


  let(:user) { FactoryGirl.create(:user) }


  let(:auction)   { FactoryGirl.create(:auction, user: user) }


  # This should return the minimal set of attributes required to create a valid
  # Auction. As you add validations to Auction, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AuctionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all auctions as @auctions" do
      auction = Auction.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:auctions)).to eq([auction])
    end
  end

  describe "GET #show" do
    it "assigns the requested auction as @auction" do
      auction = Auction.create! valid_attributes
      get :show, {:id => auction.to_param}, valid_session
      expect(assigns(:auction)).to eq(auction)
    end
  end

  describe "GET #new" do
    context "with user not signed in" do
      it "redirects to user sign in page" do
        get :new
        expect(response).to redirect_to(new_session_path)
      end
    end
    context "with user signed in" do
      before do
        # GIVEN
        u = FactoryGirl.create(:user)
        request.session[:user_id] = u.id

        # WHEN
        get :new
      end

      it "renders the new template" do
        # THEN
        expect(response).to render_template(:new)
      end

      it "create a new auction object assigned to `auction` instance variable" do
        # THEN
        expect(assigns(:auction)).to be_a_new(Auction)
      end
    end
  end

  describe "GET #edit" do
    it "assigns the requested auction as @auction" do
      auction = Auction.create! valid_attributes
      get :edit, {:id => auction.to_param}, valid_session
      expect(assigns(:auction)).to eq(auction)
    end
  end

  describe "POST #create" do
    context "with no user signed in" do
      it "redirects to the sign in page" do
        post :create, {auction: {}} # params don't matter here becuase the
                                     # controller should redirect before making
                                     # use of the auction params
        expect(response).to redirect_to new_session_path
      end
    end

    context "With user signed in" do
      def valid_params
        FactoryGirl.attributes_for(:auction)
      end

      before do
        request.session[:user_id] = user.id
      end

      context "with valid parameters" do
        it "creates a auction record in the database" do
          before_count = Auction.count
          post :create, auction: valid_params
          after_count  = Auction.count
          expect(after_count - before_count).to eq(1)
        end

        it "associates the auction with the signed in user" do
          post :create, auction: valid_params
          expect(Auction.last.user).to eq(user)
        end

        it "redirects to auction show page" do
          post :create, auction: valid_params
          expect(response).to redirect_to(auction_path(Auction.last))
        end
      end
      context "with invalid parameters" do
        def request_with_invalid_title
          post :create, auction: valid_params.merge({title: nil})
        end

        it "doesn't create a auction record in the database" do
          # expect { request_with_invalid_title }.not_to change { Auction.count }
          before_count = Auction.count
          request_with_invalid_title
          after_count  = Auction.count
          expect(before_count).to eq(after_count)
        end

        it "renders the new template" do
          request_with_invalid_title
          expect(response).to render_template(:new)
        end
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested auction" do
      auction = Auction.create! valid_attributes
      expect {
        delete :destroy, {:id => auction.to_param}, valid_session
      }.to change(Auction, :count).by(-1)
    end

    it "redirects to the auctions list" do
      auction = Auction.create! valid_attributes
      delete :destroy, {:id => auction.to_param}, valid_session
      expect(response).to redirect_to(auctions_url)
    end
  end

end
